{
  "hash": "d0f8b3765bb5cdd9bfaf4e4db98c98a5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Interactive Data Drift Analysis\"\nauthor:\n  - name: T Hyr\n    url: https://XXX.github.io/\n    orcid: 0000-0002-5300-3075\n    affiliation: Data Scientist and Content Creator.\n    affiliation-url: https://XXXXXX.github.io/ \ndate: 2024-12-20\ncategories: [Python]\ncitation: \n  url: https://XXXXXX.github.io/posts/2022-10-24-my-blog-post/ \ndraft: false\nformat:\n  html:\n    highlight-style: github\n---\n\n# Introduction\n\nThis interactive analysis explores different types of data drift scenarios and their impact on distribution metrics. We'll visualize how various statistical measures respond to different types of distribution changes.\n\n## Setup\n\nFirst, let's import our dependencies and create our analyzer:\n\n::: {#dcaab815 .cell execution_count=1}\n``` {.python .cell-code}\nfrom data_drift_analyzer import DataDriftAnalyzer\nimport ipywidgets as widgets\nfrom IPython.display import display\nimport plotly.io as pio\n\n# Enable Plotly notebook mode\npio.renderers.default = \"notebook\"\n\n# Initialize analyzer\nanalyzer = DataDriftAnalyzer(size=1000, random_state=42)\n```\n:::\n\n\n## Interactive Analysis\n\nLet's create interactive controls to explore different drift scenarios:\n\n```python\ndef update_plot(scenario, param):\n    fig = analyzer.create_visualization(scenario, param)\n    display(fig)\n    \n# Create widgets\nscenario_selector = widgets.Dropdown(\n    options=[\n        ('Mean Shift', 'mean_shift'),\n        ('Variance Change', 'variance_change'),\n        ('Multi-modal', 'multi_modal')\n    ],\n    value='mean_shift',\n    description='Scenario:'\n)\n\nparam_slider = widgets.FloatSlider(\n    value=0.0,\n    min=0.0,\n    max=5.0,\n    step=0.1,\n    description='Parameter:',\n    continuous_update=False\n)\n\nreset_button = widgets.Button(description='Reset History')\nreset_button.on_click(lambda _: analyzer.reset_history())\n\n# Display controls\ncontrols = widgets.VBox([scenario_selector, param_slider, reset_button])\noutput = widgets.interactive_output(update_plot, \n                                 {'scenario': scenario_selector, \n                                  'param': param_slider})\n\ndisplay(controls, output)\n```\n\n## Understanding the Visualizations\n\nThe dashboard consists of four main components:\n\n1. **Distribution Comparison**: Shows histograms of both the baseline and drifted distributions.\n2. **Metrics Evolution**: Tracks how different metrics change as you adjust parameters.\n3. **Metrics Summary**: Displays current values for all drift metrics.\n4. **QQ Plot**: Quantile-Quantile plot comparing the two distributions.\n\n## Interpretation Guide\n\n### Mean Shift\n- Demonstrates location changes in the distribution\n- Watch for increasing Wasserstein distance with larger shifts\n- QQ plot shows parallel offset from y=x line\n\n### Variance Change\n- Shows scale changes in the distribution\n- KL divergence becomes more sensitive\n- QQ plot shows S-shaped deviation from y=x line\n\n### Multi-modal\n- Illustrates structural changes in the distribution\n- All metrics typically show larger changes\n- QQ plot reveals complex distribution differences\n\n## Conclusions\n\nThis interactive tool helps understand:\n- How different types of drift affect various statistical metrics\n- The sensitivity of each metric to different types of changes\n- Visual patterns associated with different drift scenarios\n\n## Technical Notes\n\nThe implementation uses:\n- Plotly for interactive visualizations\n- Scientific Python stack (NumPy, SciPy) for calculations\n- Quarto for web publishing\n- IPython widgets for interactivity\n\nFor the complete code and implementation details, visit the [GitHub repository](your-repo-link).\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}